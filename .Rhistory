View(project.df)
View(projectfile.df)
View(projectfile.df)
library(ggplot2)
devtools::load_all()
projectfile.df <- importxrf(datapath = "xrf_rawdata.txt", infopath = "xrf_projectinfo.xlsx")
project.df <- convertxrf(projectpath = projectfile.df, setuppath = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
project.df <- convertxrf(projectpath = "projectfile.df", setuppath = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
project.df <- convertxrf(projectpath = projectfile.df, setuppath = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
View(project.df)
devtools::load_all()
projectfile.df <- importxrf(datapath = "xrf_rawdata.txt", infopath = "xrf_projectinfo.xlsx")
projectfile.df <- importxrf(raw.data = "xrf_rawdata.txt", project.info = "xrf_projectinfo.xlsx")
project.df <- convertxrf(imported.data = projectfile.df, setup = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
wide.df <- widen(project.data = project.df)
View(wide.df)
devtools::load_all()
wide.df <- widen(project.data = project.df)
View(wide.df)
devtools::load_all()
wide.df <- widen(project.data = project.df)
wideabove.df <- widen_above(projectpath = "project_long.csv")
wideabove.df <- widen_above(project.data = "project_long.csv")
wideabove.df <- widen_above(project.data = project.df)
View(wideabove.df)
widemeans.df <- widen_means(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
View(widemeans.df)
devtools::load_all()
widemeansabove.df <- widen_means_above(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
View(project.df)
devtools::load_all()
projectfile.df <- importxrf(raw.data = "xrf_rawdata.txt", project.info = "xrf_projectinfo.xlsx")
project.df <- convertxrf(imported.data = projectfile.df, setup = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
wide.df <- widen(project.data = project.df)
wideabove.df <- widen_above(project.data = project.df)
widemeans.df <- widen_means(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
widemeansabove.df <- widen_means_above(widened.above = wideabove.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
View(widemeans.df)
View(wideabove.df)
View(wideabove.df)
View(project.df)
View(wideabove.df)
wideabove.df <- widen_above(project.data = project.df)
View(wideabove.df)
devtools::load_all()
projectfile.df <- importxrf(raw.data = "xrf_rawdata.txt", project.info = "xrf_projectinfo.xlsx")
project.df <- convertxrf(imported.data = projectfile.df, setup = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
wide.df <- widen(project.data = project.df)
wideabove.df <- widen_above(project.data = project.df)
widemeans.df <- widen_means(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
widemeansabove.df <- widen_means_above(widened.above = wideabove.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
widemeansabove.df <- widen_means_above(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
widemeansabove.df <- widen_means_above(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "Mg")
View(widemeansabove.df)
View(widemeans.df)
widemeansabove.df <- widen_means_above(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "Cu")
widemeansabove.df <- widen_means_above(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
View(wide.df)
devtools::load_all()
devtools::load_all()
widemeansabove.df <- widen_means_above(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
View(wideabove.df)
View(widemeans.df)
View(wideabove.df)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
(c(Sample, Date, dplyr::contains("Int")))
dat <- iris[1:5, c("Species", "Sepal.Length")]
dat
a2 <- data.frame(Sample = c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10"),
Date = c("01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020"),
C = c(54.987523, 56.429872, 53.249362, 51.423873, 53.234872, 59.324871, 51238712, 59.230918, 48.239811, 54.098127),
N = c(0.287509, 0.698235, 0.398389, 0.736982, 0.348098, 0.398092, 0.607234, 0.459872, 0.409709, 0.398092),
O = c(3.348709, 2.487923, 2.589723, 3.134987, 2.598702, 2.450982, 3.287924, 1.908322, 2.234987, 2.123098),
Na = c(0.345987, 0.909342, 1.435098, 1.435873, 1.230395, 0.982345, 1.245985, 0.120985, 1.008234, 1.029341),
Mg = c(1.245098, 3.245809, 2.240598, 1.245982, 3.234982, 1.234872, 2.234098, 3.234872, 1.872345, 1.098324))
a2
b2 <- data.frame(Sample = c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10"),
Filter_type = c("PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC", "PC"),
Filter_size = c(0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8),
Filter_box_nr = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
Filter_blank = c(NA, NA, NA, NA, NA, NA, NA, NA, "blank", "blank"),
Volume = c(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000),
Location = c("L1", "L1", "L1", "L1", "L2", "L2", "L2", "L2", NA, NA),
Depth = c("10m", "50m", "100m", "200m", "10m", "50m", "100m", "200m", NA, NA))
b2
importsetup(setup = "xrf_setup.xlsx")
n <- importsetup(setup = "xrf_setup.xlsx")
View(n)
View(n)
devtools::test()
devtools::test()
source('C:/Users/Anna/Dropbox/XRF_AeN/package/xrfr/R/imports.R', echo=TRUE)
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
data.frame(Sample = c("A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10"),
Date = c("01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020", "01.01.2020"),
C = c(54.987523, 56.429872, 53.249362, 51.423873, 53.234872, 59.324871, 51238712, 59.230918, 48.239811, 54.098127),
N = c(0.287509, 0.698235, 0.398389, 0.736982, 0.348098, 0.398092, 0.607234, 0.459872, 0.409709, 0.398092),
O = c(3.348709, 2.487923, 2.589723, 3.134987, 2.598702, 2.450982, 3.287924, 1.908322, 2.234987, 2.123098),
Na = c(0.345987, 0.909342, 1.435098, 1.435873, 1.230395, 0.982345, 1.245985, 0.120985, 1.008234, 1.029341),
Mg = c(1.245098, 3.245809, 2.240598, 1.245982, 3.234982, 1.234872, 2.234098, 3.234872, 1.872345, 1.098324))
a <- importdata("/tests/testthat/testdata_rawdata.txt")
a <- importdata(raw.data = system.file("testthat", "testdata_rawdata.txt", package = "xrfr"))
a <- importdata(raw.data = system.file("/tests/testthat", "testdata_rawdata.txt", package = "xrfr"))
View(a)
View(a)
b <- importinfo(project.info = system.file("/tests/testthat", "testdata_infofile.xlsx", package = "xrfr"))
View(b)
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
View(a)
devtools::load_all()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devt
devtools::test()
devtools::test()
devtools::test()
c <- importxrf(raw.data = system.file("/tests/testthat", "testdata_rawdata.txt", package = "xrfr"), project.info = system.file("/tests/testthat", "testdata_infofile.xlsx", package = "xrfr"))
View(c)
devtools::test()
devtools::test()
projectfile.df <- importxrf(raw.data = "xrf_rawdata.txt", project.info = "xrf_projectinfo.xlsx")
project.df <- convertxrf(imported.data = projectfile.df, setup = "xrf_setup.xlsx", year = "2019", first_element = "C", last_element = "As")
wide.df <- widen(project.data = project.df)
wideabove.df <- widen_above(project.data = project.df)
widemeans.df <- widen_means(project.data = project.df, first_factor = "Day", second_factor = "Treatment", first_element = "C", last_element = "As")
View(widemeans.df)
View(wide.df)
write.csv(wide.df, file = "project_wide.csv")
write.csv(wideabove.df, file = "project_wide_abovedetlim.csv")
write.csv(widemeans.df, file = "project_wide_means.csv")
help("expect_identical")
help("filter")
help("dplyr::filter")
help("summarise")
help(package = "ggplot2")
help(package = "purr")
help(package = "dplyr")
View(a)
devtools::test()
View(c)
devtools::test()
devtools::load_all()
rawdata.df <- read_delim("xrf_rawdata.txt", delim = "\t", locale = readr::locale(decimal_mark = ","))
View(rawdata.df)
projectinfo.df <- read_excel("xrf_projectinfo.xlsx")
View(projectinfo.df)
setup.df <- read_excel("xrf_setup.xlsx")
View(setup.df)
projectfile.df <- importxrf(raw.data = rawdata.df, project.info = projectinfo.df)
View(projectfile.df)
project.df <- convertxrf(imported.data = projectfile.df, setup = setup.df, year = "2019", first_element = "C", last_element = "As")
View(project.df)
a <- data.frame(Sample = c("A1", "A2", "A3", "A4"),
Date = "01.01.2020",
C = c(2.38, 3.28, 2.13, 1.75),
N = c(1.12, 0.43, 0.83, 1.29),
O = c(1.29, 2.12, 1.92, 1.63))
a
b <- data.frame(Sample = c("A1", "A2", "A3", "A4"),
Filter_type = "PC",
Filter_size = 0.8,
Filter_box_nr = 1,
Filter_blank = c(NA, NA, NA, "blank"),
Volume = 1000)
b
View(a)
data.frame(Sample = c("A1", "A2", "A3", "A4"),
Date = "01.01.2020",
"C (Int)" = c(2.38, 3.28, 2.13, 1.75),
"N (Int)" = c(1.12, 0.43, 0.83, 1.29),
"O (Int)" = c(1.29, 2.12, 1.92, 1.63))
View(a)
a <- data.frame(Sample = c("A1", "A2", "A3", "A4"),
Date = "01.01.2020",
"C (Int)" = c(2.38, 3.28, 2.13, 1.75),
"N (Int)" = c(1.12, 0.43, 0.83, 1.29),
"O (Int)" = c(1.29, 2.12, 1.92, 1.63))
a
View(a)
ab <- importxrf(raw.data = a, project.info = b)
View(ab)
View(projectinfo.df)
View(rawdata.df)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::load_all()
devtools::test()
devtools::test()
View(project.df)
View(setup.df)
devtools::load_all()
devtools::test()
View(setup.df)
devtools::test()
devtools::test()
View(project.df)
devtools::test()
devtools::test()
devtools::test()
a <- data.frame(Sample = c("A1", "A2", "A3", "A4"),
Date = "01.01.2020",
C.Int = c(2.38, 3.28, 2.13, 1.75),
N.Int = c(1.12, 0.43, 0.83, 1.29),
O.Int = c(1.29, 2.12, 1.92, 1.63),
Filter_type = "PC",
Filter_size = 0.8,
Filter_box_nr = 1,
Filter_blank = c(NA, NA, NA, "blank"),
Volume = 1000)
colnames(a) <- c("Sample", "Date", "C", "N", "O", "Filter_type", "Filter_size", "Filter_box_nr", "Filter_blank", "Volume")
a
b <- data.frame(Element = c("C", "N", "O"),
PC = c(0.006, 0.032, 0.0025),
GFF = c(0.0094, 0.0345, 0.0025),
MolarW = c(12.01, 14.01, 16),
DL_PC = c(1.22, 0.31, 0.32),
DL_GFF = c(0.13, 0.2, 0.15),
Drift_2008 = c(36, 13, 5),
Drift_2019 = c(36, 12, 4))
ab <- convertxrf(imported.data = a, setup = b, year = "2019", first_element = "C", last_element = "O")
ab
View(ab)
devtools::test()
devtools::test()
devtools::test()
install.packages("vctrs")
# THIS CHUNK HAS MUCH THAT DOES NOT WORK YET
library(tidyverse)
library(readxl)
library(xrfr)
devtools::document()
R.Version()
devtools::check()
library(devtools)
use_mit_license()
use_mit_license("Anna Grytaas")
devtools::check()
install.packages("Rtools")
library(devtools)
library(tidyverse)
library(readxl)
Sys.which("make")
RStudio.Version()
library(devtools)
library(tidyverse)
library(readxl)
devtools::check()
library(devtools)
library(tidyverse)
library(readxl)
library(qpdf)
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.setenv('PATH' = paste0('C:\Program Files\qpdf-version_10.0.4\bin;', Sys.getenv('PATH')))
Sys.setenv('PATH' = paste0('C:\Programfiler\qpdf-version_10.0.4\bin;', Sys.getenv('PATH')))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
library(devtools)
library(tidyverse)
devtools::load_all()
a <- data.frame(Sample = c("A1", "A1", "A1", "A2", "A2", "A2", "A3", "A3", "A3", "A4", "A4", "A4", "A5", "A5", "A5"),
Date = "01.01.2020",
Filter_type = "PC",
Filter_size = 0.8,
Filter_box_nr = 1,
Filter_blank = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "blank", "blank", "blank"),
Volume = 1000,
Treatment = c("X", "X", "X", "X", "X", "X", "Z", "Z", "Z", "Z", "Z", "Z", NA, NA, NA),
Element = c("C", "N", "O", "C", "N", "O", "C", "N", "O", "C", "N", "O", "C", "N", "O"),
Concentration = c(2.86, -3.82, -0.603, 6.94, -19.3, 0.869, 3.86, -1.82, -0.873, 6.27, -12.8, 0.592, 0, 0, 0),
Detection_limit = c(1.22, 0.31, 0.32, 1.22, 0.31, 0.32, 1.22, 0.31, 0.32, 1.22, 0.31, 0.32, 1.22, 0.31, 0.32))
b <- widen_means_above(project.data = a, first_factor = "Treatment")
View(b)
devtools::test()
a <- data.frame(Sample = c("A1", "A1", "A1", "A2", "A2", "A2", "A3", "A3", "A3", "A4", "A4", "A4", "A5", "A5", "A5"),
Date = "01.01.2020",
Filter_type = "PC",
Filter_size = 0.8,
Filter_box_nr = 1,
Filter_blank = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "blank", "blank", "blank"),
Volume = 1000,
Treatment = c("X", "X", "X", "X", "X", "X", "Z", "Z", "Z", "Z", "Z", "Z", NA, NA, NA),
Time = c(0, 0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, NA, NA, NA),
Element = c("C", "N", "O", "C", "N", "O", "C", "N", "O", "C", "N", "O", "C", "N", "O"),
Concentration = c(2.86, -3.82, -0.603, 6.94, -19.3, 0.869, 3.86, -1.82, -0.873, 6.27, -12.8, 0.592, 0, 0, 0),
Detection_limit = c(1.22, 0.31, 0.32, 1.22, 0.31, 0.32, 1.22, 0.31, 0.32, 1.22, 0.31, 0.32, 1.22, 0.31, 0.32))
b <- widen_means_above(project.data = a, first_factor = "Treatment", second_factor = "Time")
View(b)
devtools::test()
rmarkdown::render("instructions.Rmd", pdf_document)
rmarkdown::render("instructions.Rmd", "pdf_document")
devtools::document()
devtools::build()
setwd("C:/Users/Anna/Dropbox/XRF_AeN/package/files for testing installed package")
setwd("C:/Users/Anna/OneDrive - University of Bergen/XRF R testing")
remove.packages("xrfr", lib="~/R/win-library/4.0")
devtools::install_github("agryt/xrfr")
library(xrfr)
vignette("xrfr")
help(package = "xrfr")
vignette("xrfr")
help("xrfr")
devtools::install_github("agryt/xrfr", build_vignettes = TRUE)
devtools::install_github("agryt/xrfr", build_vignettes = TRUE, force = TRUE)
remove.packages("xrfr", lib="~/R/win-library/4.0")
devtools::install_github("agryt/xrfr", build_vignettes = TRUE)
devtools::install_github("agryt/xrfr", build_vignettes = TRUE)
vignette("xrfr")
readr::read_csv(system.file("inst/extdata/project_midway.csv", package = "xrfr"))
readr::read_csv(system.file("/inst/extdata/project_midway.csv", package = "xrfr"))
readr::read_csv(file = system.file("/inst/extdata/project_midway.csv", package = "xrfr"))
readr::read_csv(file = system.file("/inst/extdata/project_midway.csv"))
readr::read_csv(file = system.file("inst/extdata/project_midway.csv", package = "xrfr"))
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(devtools)
update.packages("processx")
library(devtools)
remove.packages("processx", lib="~/R/win-library/4.0")
install.packages("processx")
library(devtools)
devtools::load_all()
devtools::test()
devtools::check()
vignette("namespace")
devtools::document()
devtools::document()
roxygen2::namespace_roclet()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("roxygen2", lib="~/R/win-library/4.0")
install.packages("roxygen2")
install.packages("roxygen2")
library(tidyverse)
library(devtools)
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
library(devtools)
devtools::load_all()
devtools::document()
library(devtools)
devtools::load_all()
devtools::check()
sample.df <- transformssd(hex_data = "sample_hex.txt")
sample.df <- transformssd(hex_data = "./inst/extdata/sample_hex.txt")
devtools::load_all()
sample.df <- transformssd(hex_data = "./inst/extdata/sample_hex.txt")
string <- readLines("./inst/extdata/sample_hex.txt")
string <- gsub(" ", "", string)
splitstring <- as.list(stringr::str_split(string, "2F416C676572474646"))
hex <- "2F416C676572474646"
splitstring.added <- mapply(paste0, splitstring, hex)
subsplit <- gsub(".*?(00)(.*?)(2F416C676572474646).*", "\\2", splitstring.added)
subsubsplit <- substr(subsplit, 1, 4)
substring <- paste(unlist(subsubsplit), collapse='')
raw.substring <- sapply(seq(1, nchar(substring), by=2), function(x) substr(substring, x, x+1))
text.substring <- rawToChar(as.raw(strtoi(raw.substring, 16L)))
list.extracted <- stringr::str_extract_all(text.substring, "[A-Z][a-z]|[A-Z//s]")
unlist.extracted <- unlist(list.extracted)
extracted.df <- as.data.frame(unlist.extracted)
colnames(extracted.df) <- "Element"
subsplit1 <- gsub(".*?(204B41)(.*?)(2A0020).*", "\\2", splitstring.added)
subsubsplit1 <- stringr::str_sub(subsplit1, start = -8)
subsubsplit1 <- subsubsplit1[-1]
magicfor::magic_for(silent = TRUE)
for (i in 1:length(subsubsplit1)) {
a <- readBin(as.raw(strtoi(apply(matrix(strsplit(subsubsplit1,"")[[i]],2),2,paste, collapse=""), 16)), "double", size=4)
magicfor::put(a)
}
values.df <- magicfor::magic_result_as_dataframe()
values.df <- values.df %>%
dplyr::select(a)
colnames(values.df) <- "kcps"
magicfor::magic_for(silent = TRUE)
for (i in 1:length(subsubsplit1)) {
a <- readBin(as.raw(strtoi(apply(matrix(strsplit(subsubsplit1,"")[[i]],2),2,paste, collapse=""), 16)), "double", size=4)
magicfor::put(a)
}
# creating a dataframe with the values
values.df <- magicfor::magic_result_as_dataframe()
values.df <- values.df %>%
dplyr::select(a)
colnames(values.df) <- "kcps"
View(values.df)
magicfor::magic_for(silent = TRUE)
for (i in 1:length(subsubsplit1)) {
a <- readBin(as.raw(strtoi(apply(matrix(strsplit(subsubsplit1,"")[[i]],2),2,paste, collapse=""), 16)), "double", size=4)
magicfor::put(a)
}
values.df <- magicfor::magic_result_as_dataframe()
View(values.df)
devtools::load_all()
magicfor::magic_for(silent = TRUE)
for (i in 1:length(subsubsplit1)) {
a <- readBin(as.raw(strtoi(apply(matrix(strsplit(subsubsplit1,"")[[i]],2),2,paste, collapse=""), 16)), "double", size=4)
magicfor::put(a)
}
values.df <- magicfor::magic_result_as_dataframe()
View(values.df)
magic_for(silent = TRUE)
for (i in 1:length(subsubsplit1)) {
a <- readBin(as.raw(strtoi(apply(matrix(strsplit(subsubsplit1,"")[[i]],2),2,paste, collapse=""), 16)), "double", size=4)
put(a)
}
values.df <- magicfor::magic_result_as_dataframe()
View(values.df)
devtools::load_all()
sample.df <- transformssd(hex_data = "./inst/extdata/sample_hex.txt")
View(sample.df)
library(tidyverse)
write_csv(sample.df, "./inst/extdata/sample_transformed.csv")
devtools::load_all()
devtools::document()
devtools::load_all()
rawdata.df <- read_delim("./inst/extdata/xrf_rawdata.txt", delim = "\t", locale = locale(decimal_mark = ","))
projectinfo.df <- read_excel("./inst/extdata/xrf_projectinfo.xlsx")
library(readxl)
projectinfo.df <- read_excel("./inst/extdata/xrf_projectinfo.xlsx")
projectfile.df <- readxrf(raw_data = rawdata.df, project_info = projectinfo.df)
View(projectfile.df)
View(projectfile.df)
blanks.df <- show_blanks(imported_data = projectfile.df, first_element = "C", last_element = "As")
View(blanks.df)
View(projectfile.df)
View(blanks.df)
write_csv(blanks.df, "./inst/extdata/mean_blanks.csv")
a <- "53 53 44 33 12 00 00 00 73 61 6d 70 6c 65 30 30 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 64 6D 69 6E 00 00 00 00 00 00 00 00 00 00 00 30 31 2d 4a 61 6e 2d 32 30 32 30 20 31 34 3a 30 30 3a 30 30 01 00 52 68 00 00 B4 42 00 00 7C 42 00 00 96 42 15 A8 00 00 00 40 38 44 69 19 1F BA 52 7E E4 40 23 1F 5D B0 75 13 92 42 1C A0 3E 3D CC 52 F8 0E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18 01 00 00 10 00 05 00 CD CC 4C 3E 80 6A 3C 3D 8F DE 07 42 E2 86 96 3F 01 06 AB 02 4C 69 46 32 30 30 00 00 FE D4 80 40 01 00 02 00 4E 61 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 9A 99 99 3E 67 66 66 41 67 66 06 42 B9 1E 05 3F 30 2E 34 36 20 64 65 67 72 2E 00 00 00 00 00 00 33 34 20 6D 6D 00 00 00 00 00 00 00 00 00 00 00 4E 6F 6E 65 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 42 3C 00 3A 00 A3 00 00 00 00 00 09 00 10 00 8E 34 06 3C C1 CD 45 BC F8 EC 50 BC 00 00 00 00 1E 00 16 00 41 73 20 4B 41 31 2D 48 53 2D 4D 69 6E 2F 41 6C 67 65 72 47 46 46 14 00 08 00 7B 14 14 42 97 93 50 3C 10 00 1A 00 00 00 41 73 20 4B 41 31 2D 48 53 2D 4D 69 8F DE 07 42 00 00 F0 41 0B FE D0 3F 2A 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 06 00 9A 99 39 41 00 00 01 01 00 00 10 00 05 00 CD CC 4C 3E CD CC CC 3D A2 32 2F 42 31 08 33 42 DF 06 20 03 4F 56 4F 2D 43 00 00 00 00 00 F0 42 01 00 01 00 41 72 20 43 48 34 00 00 00 00 00 00 00 00 00 00 67 66 86 41 9A 99 19 42 CD CC CC 3E 00 00 00 00 00 00 00 00 CD CC CC 3E 31 2E 30 30 20 64 65 67 72 2E 00 00 00 00 00 00 33 34 20 6D 6D 00 00 00 00 00 00 00 00 00 00 00 4E 6F 6E 65 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 42 1B 00 81 00 AF 00 00 00 00 00 1E 00 13 00 43 20 20 4B 41 31 2D 41 4C 54 2F 41 6C 67 65 72 47 46 46 14 00 08 00 3D 0A 14 42 94 C5 C4 3D 10 00 1A 00 00 00 43 20 20 4B 41 31 2D 41 4C 54 2F 41 A2 32 2F 42 00 00 90 41 CA 25 59 42 2A 00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 06 00 EC C4 9E 40 00 00 15 01 00 00 10 00 05 00 CD CC 4C 3E CD CC CC 3D F6 9D 09 42 11 28 FD 41 D4 06 20 03 4F 56 4F 2D 4E 00 00 00 00 00 D6 42 01 00 01 00 41 72 20 43 48 34 00 00 00 00 00 00 00 00 00 00 67 66 86 41 9A 99 19 42 CD CC CC 3E 00 00 00 00 00 00 00 00 CD CC CC 3E 31 2E 30 30 20 64 65 67 72 2E 00 00 00 00 00 00 33 34 20 6D 6D 00 00 00 00 00 00 00 00 00 00 00 4E 6F 6E 65 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 42 1B 00 81 00 AF 00 00 00 00 00 09 00 10 00 A1 5F 15 3F 24 9C EA BF 00 00 00 00 00 00 00 00 1E"
c <- transformssd(hex_data = a)
string <- readLines(a)
devtools::load_all()
c <- transformssd(hex_data = a)
View(c)
View(c)
View(sample.df)
View(sample.df)
View(c)
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
top_downloads <- c("devtools", "rlang", "dplyr", "Rcpp", "tibble",
"ggplot2", "glue", "pillar", "cli", "data.table")
grep(x = top_downloads, pattern = "g(g|l)", value = TRUE)
grep(x = top_downloads, pattern = "g(g|r)", value = TRUE)
grep(x = top_downloads, pattern = "g(g|R)", value = TRUE)
grep(x = top_downloads, pattern = "(g|r)", value = TRUE)
grep(x = top_downloads, pattern = "(g|R)", value = TRUE)
grep(x = top_downloads, pattern = "(g|\\d)", value = TRUE)
grep(x = top_downloads, pattern = "(g|\\W)", value = TRUE)
grep(x = top_downloads, pattern = "[g\\W]", value = TRUE)
is.numeric(6)
View(c)
View(blanks.df)
is.numeric(blanks.df$Filter_type)
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
library(devtools)
install_github("agryt/xrfr", build_vignettes = TRUE)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::test()
devtools::document()
devtools::load_all()
devtools::check()
remove.packages("xrfr", lib="~/R/win-library/4.0")
remotes::install_github("agryt/xrfr", build_vignettes = TRUE)
